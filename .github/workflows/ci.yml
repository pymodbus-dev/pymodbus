name: CI

on:
  workflow_dispatch:
    inputs:
      run_lint:
        description: 'Run lint'
        required: false
        default: true
        type: boolean
      run_test:
        description: 'Run test'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - dev
      - master
    tags:
      - v*
  pull_request:
    branches:
      - dev
  schedule:
    # Daily at 02:10 UTC.
    - cron: '10 2 * * *'


jobs:
  integreation_test:
    name: ${{ matrix.task.name }} - ${{ matrix.os.on }} - ${{ matrix.python.version }}
    runs-on: ${{ matrix.os.on }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        task:
          - name: pylint
            type: lint
            cmd: pylint --recursive=y examples pymodbus test
          - name: codespell
            type: lint
            cmd: codespell
          - name: bandit
            type: lint
            cmd: bandit -r -c bandit.yaml .
          - name: flake8
            type: lint
            cmd: flake8
          - name: isort
            type: lint
            cmd: isort --check .
          - name: black
            type: lint
            cmd: black --check --safe --quiet examples/ pymodbus/ test/
          - name: docs
            type: lint
            cmd: make -C doc/ html
          - name: pytest
            type: test
            cmd: pytest --cov=pymodbus --cov=test --cov-report=term-missing --cov-report=xml -v --full-trace --timeout=20
        os:
          - on: ubuntu-latest
            activate: '. venv/bin/activate'
          - on: macos-latest
            activate: '. venv/bin/activate'
            no-lint: 'yes'
          - on: windows-latest
            activate: 'venv/Scripts/activate'
            no-lint: 'yes'
        python:
          - version: '3.8'
            no-lint: 'no'
          - version: '3.9'
            no-lint: 'yes'
          - version: '3.10'
            no-lint: 'yes'
          - version: pypy-3.8
            implementation: pypy
            no-lint: 'yes'
          - version: pypy-3.9
            implementation: pypy
            no-lint: 'yes'
        exclude:
          - task:
              type: lint
            os:
              no-lint: 'yes'
          - task:
              type: lint
            python:
              no-lint: 'yes'
          - os:
              on: macos-latest
            python:
              implementation: pypy
          - os:
              on: windows-latest
            python:
              implementation: pypy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up ${{ matrix.python.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}

      - name: venv restore
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: "venv_${{ matrix.os.on }}_${{ matrix.python.version }}_${{ hashFiles('requirements.txt') }}"

      - name: venv create
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
        run: |
          python -m venv venv
          ${{ matrix.os.activate }}
          pip install -e . -r requirements.txt

      - name: test
        if: ${{ matrix.task.type == 'test' && inputs.run_test }}
        run: |
          ${{ matrix.os.activate }}
          ${{ matrix.task.cmd }}

      - name: lint
        if: ${{ matrix.task.type == 'lint' && inputs.run_lint }}
        run: |
          ${{ matrix.os.activate }}
          ${{ matrix.task.cmd }}

  all:
    name: All
    runs-on: ubuntu-latest
    needs:
      - integreation_test
    steps:
      - name: This
        run: |
          ls -l
