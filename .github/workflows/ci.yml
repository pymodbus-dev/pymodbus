name: CI

on:
  push:
    branches:
      - dev
      - master
    tags:
      - v*
  pull_request:
    branches:
      - dev
  schedule:
    - cron: '10 2 * * *'
  workflow_dispatch:


jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up python
        id: setupPython
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: cache virtualenv
        id: cacheVenv
        uses: actions/cache@v3
        with:
          path: venv/
          key: ${{ runner.os }}-${{ steps.setupPython.outputs.python-version }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.setupPython.outputs.python-version }}-venv-

      - name: Install requirements
        if: steps.cacheVenv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -U -e . -r requirements.txt
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Activate venv
        if: steps.cacheVenv.outputs.cache-hit == 'true'
        run: |
          source venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: codespell
        run: codespell

      - name: pylint
        run: pylint --recursive=y examples pymodbus test

      - name: precommit (black, bandit, and ruff)
        run: pre-commit run --all-files

      - name: docs
        run: make -C doc/ html

      - name: mypy
        run: mypy pymodbus

  analyze:
    name: Analyze Python
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      - uses: github/codeql-action/init@v2
        with:
          languages: python
      - uses: github/codeql-action/autobuild@v2
      - uses: github/codeql-action/analyze@v2


  integreation_test:
    name: pytest - ${{ matrix.os.on }} - ${{ matrix.python.version }}
    runs-on: ${{ matrix.os.on }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os:
          - on: ubuntu-latest
          - on: macos-latest
          - on: windows-latest
        python:
          - version: '3.8'
          - version: '3.9'
          - version: '3.10'
          - version: '3.11'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up ${{ matrix.python.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}

      # - name: venv restore
      #  id: cache-venv
      #  uses: syphar/restore-virtualenv@v1
      #  with:
      #    requirement_files: requirements.txt

      - name: venv create
      #  if: steps.cache-venv.outputs.cache-hit != 'true'
        run: pip install -e . -r requirements.txt

      - name: pytest
        run: pytest --cov=pymodbus --cov=test --cov-report=term-missing --cov-report=xml -v --full-trace --timeout=20

  ci_complete:
    name: ci_complete
    runs-on: ubuntu-latest
    needs:
      - linters
      - integreation_test
      - analyze
    timeout-minutes: 1
    steps:
      - name: Dummy
        run: ls
